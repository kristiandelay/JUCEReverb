/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "ReverbProcessor.h"
#include "ReverbEditor.h"

class FloatParameter : public AudioProcessorParameter
{
public:

    FloatParameter (ReverbProcessor& p, float defaultParameterValue, const String& paramName)
        : parent (p), 
          defaultValue (defaultParameterValue),
          value (defaultParameterValue),
          name (paramName)
    {
    }

    float getValue() const override
    {
        return value;
    }

    void setValue (float newValue) override
    {
        value = newValue;
        parent.parameterChange (this, newValue);
    }

    float getDefaultValue() const override
    {
        return defaultValue;
    }

    String getName (int maximumStringLength) const override
    {
        ignoreUnused (maximumStringLength);

        return name;
    }

    String getLabel() const override
    {
        return String();
    }

    float getValueForText (const String& text) const override
    {
        return text.getFloatValue();
    }

private:
    ReverbProcessor& parent;
    float defaultValue, value;
    String name;
};

const float defaultRoomSize = 0.5f;
const float defaultDamping = 0.5f;
const float defaultWetLevel = 0.33f;
const float defaultDryLevel = 0.4f;
const float defaultWidth = 1.0f;

//==============================================================================
ReverbProcessor::ReverbProcessor()
{
        // Set up our parameters. The base class will delete them for us.
    addParameter (roomSize  = new FloatParameter (*this, defaultRoomSize,  "Room Size"));
    addParameter (damping = new FloatParameter (*this, defaultDamping, "Damping"));
    addParameter (wet = new FloatParameter (*this, defaultWetLevel, "Wet"));
    addParameter (dry = new FloatParameter (*this, defaultDryLevel, "Dry"));
    addParameter (width = new FloatParameter (*this, defaultWidth, "Width"));
}

ReverbProcessor::~ReverbProcessor()
{
}

//==============================================================================
const String ReverbProcessor::getName() const
{
    return JucePlugin_Name;
}

const String ReverbProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String ReverbProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool ReverbProcessor::isInputChannelStereoPair (int index) const
{
    ignoreUnused (index);
    return true;
}

bool ReverbProcessor::isOutputChannelStereoPair (int index) const
{
    ignoreUnused (index);
    return true;
}

bool ReverbProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool ReverbProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool ReverbProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double ReverbProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int ReverbProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int ReverbProcessor::getCurrentProgram()
{
    return 0;
}

void ReverbProcessor::setCurrentProgram (int index)
{
    ignoreUnused (index);
}

const String ReverbProcessor::getProgramName (int index)
{
    ignoreUnused (index);
    return String();
}

void ReverbProcessor::changeProgramName (int index, const String& newName)
{
    ignoreUnused (index, newName);
}

//==============================================================================
void ReverbProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    ignoreUnused (samplesPerBlock);

    reverb = new Reverb;
    reverb->setSampleRate (sampleRate);
    reverb->reset();
}

void ReverbProcessor::releaseResources()
{
    reverb = nullptr;
}

void ReverbProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    ignoreUnused (midiMessages);

    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    Reverb::Parameters p;

    p.roomSize = roomSize->getValue();
    p.damping = damping->getValue();
    p.wetLevel = wet->getValue();
    p.dryLevel = dry->getValue();
    p.width = width->getValue();
    p.freezeMode = 0.0f;

    reverb->setParameters (p);

    if (getNumInputChannels() > 0)
    {
        if (getNumInputChannels() == 1)
            reverb->processMono (buffer.getWritePointer (0), buffer.getNumSamples());
        else 
            reverb->processStereo (buffer.getWritePointer (0), buffer.getWritePointer (1), buffer.getNumSamples());
    }   
}

//==============================================================================
bool ReverbProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* ReverbProcessor::createEditor()
{
    return new ReverbEditor (*this);
}

//==============================================================================
void ReverbProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    ignoreUnused (destData);
}

void ReverbProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    ignoreUnused (data, sizeInBytes);
}

//==============================================================================
void ReverbProcessor::parameterChange (AudioProcessorParameter* param, float newValue)
{
    // do something with this
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new ReverbProcessor();
}
